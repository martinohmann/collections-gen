// +build !ignore_autogenerated

// Code generated by collections-gen. DO NOT EDIT.

package collections

import (
	"sort"

	"github.com/martinohmann/collections-gen/examples/equalityfunc"
	"github.com/martinohmann/collections-gen/examples/equalityfunc/somepkg"
)

// FooCollection is a collection of *equalityfunc.Foo values.
type FooCollection struct {
	items []*equalityfunc.Foo
}

// NewFooCollection creates a new collection from a slice of *equalityfunc.Foo.
func NewFooCollection(items []*equalityfunc.Foo) *FooCollection {
	return &FooCollection{items}
}

// Interface returns the underlying slice used by the collection as interface{}
// value.
func (c *FooCollection) Interface() interface{} {
	return c.items
}

// Items returns the underlying slice of *equalityfunc.Foo values used by the
// collection.
func (c *FooCollection) Items() []*equalityfunc.Foo {
	return c.items
}

// EachIndex calls fn for every item in the collection. The slice index of the
// item is passed to fn as the second argument.
func (c *FooCollection) EachIndex(fn func(*equalityfunc.Foo, int)) {
	for i, item := range c.items {
		fn(item, i)
	}
}

// Each calls fn for every item in the collection.
func (c *FooCollection) Each(fn func(*equalityfunc.Foo)) {
	c.EachIndex(func(item *equalityfunc.Foo, _ int) {
		fn(item)
	})
}

// IndexOf searches for el in the collection and returns the first index where
// el is found. If el is not present in the collection IndexOf will return -1.
func (c *FooCollection) IndexOf(el *equalityfunc.Foo) int {
	for i, item := range c.items {
		if somepkg.Equal(item, el) {
			return i
		}
	}

	return -1
}

// First returns the first item from the collection. Will panic if the
// underlying slice is empty.
func (c *FooCollection) First() *equalityfunc.Foo {
	return c.Nth(0)
}

// FirstN returns the first n *equalityfunc.Foo items of the collection. Will
// return less than n items if the underlying slice's length is < n.
func (c *FooCollection) FirstN(n int) []*equalityfunc.Foo {
	if n > c.Len() {
		return c.Items()
	}

	return c.Slice(0, n)
}

// Last returns the last item from the collection. Will panic if the underlying
// slice is empty.
func (c *FooCollection) Last() *equalityfunc.Foo {
	return c.Nth(c.Len() - 1)
}

// LastN returns the last n *equalityfunc.Foo items of the collection. Will return
// less than n items if the underlying slice's length is < n.
func (c *FooCollection) LastN(n int) []*equalityfunc.Foo {
	if c.Len()-n < 0 {
		return c.Items()
	}

	return c.Slice(c.Len()-n, c.Len())
}

// Get returns the item at pos from the collection. Will panic if the
// underlying slice is shorter than pos+1.
func (c *FooCollection) Get(pos int) *equalityfunc.Foo {
	return c.Nth(pos)
}

// Nth returns the nth item from the collection. Will panic if the underlying
// slice is shorter than pos+1.
func (c *FooCollection) Nth(pos int) *equalityfunc.Foo {
	return c.items[pos]
}

// Len returns the length of the underlying *equalityfunc.Foo slice.
func (c *FooCollection) Len() int {
	return len(c.items)
}

// Cap returns the capacity of the underlying *equalityfunc.Foo slice.
func (c *FooCollection) Cap() int {
	return cap(c.items)
}

// Append appends items and returns the collection.
func (c *FooCollection) Append(items ...*equalityfunc.Foo) *FooCollection {
	c.items = append(c.items, items...)
	return c
}

// Prepend prepends items and returns the collection.
func (c *FooCollection) Prepend(items ...*equalityfunc.Foo) *FooCollection {
	c.items = append(items, c.items...)
	return c
}

// Copy creates a copy of the collection and the underlying *equalityfunc.Foo slice.
func (c *FooCollection) Copy() *FooCollection {
	s := make([]*equalityfunc.Foo, c.Len(), c.Len())
	copy(s, c.items)

	return NewFooCollection(s)
}

// Filter removes all items from the collection for which fn evaluates to
// false and returns c.
func (c *FooCollection) Filter(fn func(*equalityfunc.Foo) bool) *FooCollection {
	s := c.items[:0]

	for _, item := range c.items {
		if fn(item) {
			s = append(s, item)
		}
	}

	var zeroValue *equalityfunc.Foo

	for i := len(s); i < len(c.items); i++ {
		c.items[i] = zeroValue
	}

	c.items = s

	return c
}

// Collect removes all items from the collection for which fn evaluates to
// false and returns c.
func (c *FooCollection) Collect(fn func(*equalityfunc.Foo) bool) *FooCollection {
	return c.Filter(fn)
}

// Reject removes all items from the collection for which fn evaluates to
// true and returns c.
func (c *FooCollection) Reject(fn func(*equalityfunc.Foo) bool) *FooCollection {
	return c.Filter(func(v *equalityfunc.Foo) bool {
		return !fn(v)
	})
}

// Partition partitions the collection into two new collections. The first
// collection contains all items where fn evaluates to true, the second one all
// items where fn evaluates to false.
func (c *FooCollection) Partition(fn func(*equalityfunc.Foo) bool) (*FooCollection, *FooCollection) {
	lhs := make([]*equalityfunc.Foo, 0, c.Len())
	rhs := make([]*equalityfunc.Foo, 0, c.Len())

	for _, item := range c.items {
		if fn(item) {
			lhs = append(lhs, item)
		} else {
			rhs = append(rhs, item)
		}
	}

	return NewFooCollection(lhs), NewFooCollection(rhs)
}

// Map calls fn for each item in the collection an replaces its value with the
// result of fn.
func (c *FooCollection) Map(fn func(*equalityfunc.Foo) *equalityfunc.Foo) *FooCollection {
	return c.MapIndex(func(item *equalityfunc.Foo, _ int) *equalityfunc.Foo {
		return fn(item)
	})
}

// MapIndex calls fn for each item in the collection an replaces its value with the
// result of fn.
func (c *FooCollection) MapIndex(fn func(*equalityfunc.Foo, int) *equalityfunc.Foo) *FooCollection {
	for i, item := range c.items {
		c.items[i] = fn(item, i)

	}

	return c
}

// Reduce calls fn for each item in c and reduces the result into reducer. The
// reducer contains the value returned by the call to fn for the previous item.
// Reducer will be the zero *equalityfunc.Foo value on the first invocation.
func (c *FooCollection) Reduce(fn func(reducer *equalityfunc.Foo, item *equalityfunc.Foo) *equalityfunc.Foo) *equalityfunc.Foo {
	var reducer *equalityfunc.Foo

	for _, item := range c.items {
		reducer = fn(reducer, item)
	}

	return reducer
}

// Find returns the first item for which fn evaluates to true. If the
// collection does not contain a matching item, Find will return the zero
// *equalityfunc.Foo value. If you need to distinguish zero values from a condition
// that did not match any item consider using FindOk instead.
func (c *FooCollection) Find(fn func(*equalityfunc.Foo) bool) *equalityfunc.Foo {
	item, _ := c.FindOk(fn)

	return item
}

// FindOk returns the first item for which fn evaluates to true. If the
// collection does not contain a matching item, FindOk will return the zero
// *equalityfunc.Foo value. The second return value denotes whether the condition
// matched any item or not.
func (c *FooCollection) FindOk(fn func(*equalityfunc.Foo) bool) (*equalityfunc.Foo, bool) {
	for _, item := range c.items {
		if fn(item) {
			return item, true
		}
	}

	var zeroValue *equalityfunc.Foo
	return zeroValue, false
}

// Any returns true as soon as fn evaluates to true for one item in c.
func (c *FooCollection) Any(fn func(*equalityfunc.Foo) bool) bool {
	for _, item := range c.items {
		if fn(item) {
			return true
		}
	}

	return false
}

// All returns true if fn evaluates to true for all items in c.
func (c *FooCollection) All(fn func(*equalityfunc.Foo) bool) bool {
	for _, item := range c.items {
		if !fn(item) {
			return false
		}
	}

	return true
}

// Contains returns true if the collection contains el.
func (c *FooCollection) Contains(el *equalityfunc.Foo) bool {
	for _, item := range c.items {
		if somepkg.Equal(item, el) {
			return true
		}
	}

	return false
}

// Sort sorts the collection using the passed in comparator func.
func (c *FooCollection) Sort(fn func(*equalityfunc.Foo, *equalityfunc.Foo) bool) *FooCollection {
	sort.Slice(c.items, c.lessFunc(fn))
	return c
}

// IsSorted returns true if the collection is sorted in the order defined by
// the passed in comparator func.
func (c *FooCollection) IsSorted(fn func(*equalityfunc.Foo, *equalityfunc.Foo) bool) bool {
	return sort.SliceIsSorted(c.items, c.lessFunc(fn))
}

func (c *FooCollection) lessFunc(fn func(*equalityfunc.Foo, *equalityfunc.Foo) bool) func(int, int) bool {
	return func(i, j int) bool {
		return fn(c.items[i], c.items[j])
	}
}

// Reverse reverses the order of the collection items in place and returns c.
func (c *FooCollection) Reverse() *FooCollection {
	for l, r := 0, len(c.items)-1; l < r; l, r = l+1, r-1 {
		c.items[l], c.items[r] = c.items[r], c.items[l]
	}

	return c
}

// Remove removes the collection item at position pos. Will panic if pos is out
// of bounds.
func (c *FooCollection) Remove(pos int) *FooCollection {
	c.items = append(c.items[:pos], c.items[pos+1:]...)
	return c
}

// RemoveItem removes all instances of item from the collection and returns it.
func (c *FooCollection) RemoveItem(item *equalityfunc.Foo) *FooCollection {
	for i, el := range c.items {
		if somepkg.Equal(el, item) {
			c.items = append(c.items[:i], c.items[i+1:]...)
		}
	}

	return c
}

// InsertItem inserts item into the collection at position pos. Will panic if
// pos is out of bounds.
func (c *FooCollection) InsertItem(item *equalityfunc.Foo, pos int) *FooCollection {
	var zeroValue *equalityfunc.Foo
	c.items = append(c.items, zeroValue)
	copy(c.items[pos+1:], c.items[pos:])
	c.items[pos] = item
	return c
}

// Cut returns a copy of the underlying *equalityfunc.Foo slice with the items
// between index i and j removed. Will panic if i or j is out of bounds of the
// underlying slice.
func (c *FooCollection) Cut(i, j int) []*equalityfunc.Foo {
	s := make([]*equalityfunc.Foo, 0, c.Len())
	s = append(s, c.items[:i]...)
	return append(s, c.items[j:]...)
}

// Slice returns the *equalityfunc.Foo items between slice index i and j. Will
// panic if i or j is out of bounds.
func (c *FooCollection) Slice(i, j int) []*equalityfunc.Foo {
	return c.items[i:j]
}
